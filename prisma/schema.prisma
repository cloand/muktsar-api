// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  EDITOR
  
  VOLUNTEER
  DONOR
}

enum Status {
  ACTIVE
  INACTIVE
  CANCELLED
  COMPLETED
  UPCOMING
}

enum EventCategory {
  BLOOD_CAMP
  MEDICAL_CAMP
  AWARENESS
  FUNDRAISING
  COMMUNITY
}

enum FileType {
  IMAGE
  DOCUMENT
  VIDEO
}

enum MediaCategory {
  GALLERY
  HERO
  ABOUT
  TEAM
  EVENTS
  TESTIMONIALS
  BLOOD_CAMPS
  MEDICAL_CAMPS
  TEAM_MEMBERS
  ACHIEVEMENTS
  COMMUNITY_WORK
  FUNDRAISING
  AWARENESS_CAMPAIGNS
  OTHER
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AlertStatus {
  ACTIVE
  RESOLVED
  CANCELLED
}

enum AlertUrgency {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model User {
  id           String   @id @default(uuid())
  email        String?
  phone        String   @unique
  passwordHash String   @map("password_hash")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  role         UserRole @default(ADMIN)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  bloodCamps    BloodCamp[]
  medicalCamps  MedicalCamp[]
  events        Event[]
  bloodDrives   BloodDrive[]
  contentPages  ContentPage[]
  mediaFiles    MediaFile[]
  alerts        Alert[]
  fcmTokens     FCMToken[]

  @@map("users")
}

model TeamMember {
  id          String   @id @default(uuid())
  name        String   @unique
  role        String
  position    String
  email       String?
  phone       String?
  description String?
  imageUrl    String?  @map("image_url")
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  mediaFiles MediaFile[]

  @@map("team_members")
}

model BloodCamp {
  id               String   @id @default(uuid())
  title            String
  description      String?
  campDate         DateTime @map("camp_date")
  startTime        String   @map("start_time")
  endTime          String   @map("end_time")
  location         String
  address          String
  targetUnits      Int      @default(0) @map("target_units")
  collectedUnits   Int      @default(0) @map("collected_units")
  status           Status   @default(UPCOMING)
  contactPerson    String   @map("contact_person")
  contactPhone     String   @map("contact_phone")
  registrationLink String?  @map("registration_link")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  createdBy        String   @map("created_by")

  // Relations
  creator    User        @relation(fields: [createdBy], references: [id])
  mediaFiles MediaFile[]

  @@map("blood_camps")
}

model MedicalCamp {
  id              String   @id @default(uuid())
  title           String
  description     String?
  campDate        DateTime @map("camp_date")
  startTime       String   @map("start_time")
  endTime         String   @map("end_time")
  location        String
  address         String
  services        Json?
  capacity        Int      @default(0)
  registeredCount Int      @default(0) @map("registered_count")
  status          Status   @default(UPCOMING)
  contactPerson   String   @map("contact_person")
  contactPhone    String   @map("contact_phone")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       String   @map("created_by")

  // Relations
  creator    User        @relation(fields: [createdBy], references: [id])
  mediaFiles MediaFile[]

  @@map("medical_camps")
}

model Event {
  id               String        @id @default(uuid())
  title            String
  description      String?
  eventDate        DateTime      @map("event_date")
  startTime        String        @map("start_time")
  endTime          String        @map("end_time")
  location         String
  address          String
  category         EventCategory
  status           Status        @default(UPCOMING)
  isFeatured       Boolean       @default(false) @map("is_featured")
  highlights       Json?
  registrationLink String?       @map("registration_link")
  imageUrl         String?       @map("image_url")

  // Contact Information
  contactPerson    String?       @map("contact_person")
  contactPhone     String?       @map("contact_phone")
  contactEmail     String?       @map("contact_email")

  // Registration Management
  maxParticipants       Int?     @map("max_participants")
  registeredParticipants Int?    @default(0) @map("registered_participants")
  registrationRequired  Boolean  @default(false) @map("registration_required")
  registrationFee       Float?   @map("registration_fee")

  // Financial Tracking
  targetAmount     Float?        @map("target_amount")
  raisedAmount     Float?        @default(0) @map("raised_amount")

  // Impact Metrics
  bloodUnitsCollected    Int?    @map("blood_units_collected")
  peopleServed          Int?    @map("people_served")
  volunteersParticipated Int?   @map("volunteers_participated")

  // Additional Information
  notes            String?

  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  createdBy        String        @map("created_by")

  // Relations
  creator    User        @relation(fields: [createdBy], references: [id])
  mediaFiles MediaFile[]

  @@map("events")
}

model BloodDrive {
  id             String   @id @default(uuid())
  title          String
  description    String?
  driveDate      DateTime @map("drive_date")
  startTime      String   @map("start_time")
  endTime        String   @map("end_time")
  location       String
  address        String
  targetUnits    Int      @default(0) @map("target_units")
  collectedUnits Int      @default(0) @map("collected_units")
  status         Status   @default(UPCOMING)
  organizer      String
  contactInfo    String   @map("contact_info")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  createdBy      String   @map("created_by")

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("blood_drives")
}

model ContentPage {
  id              String   @id @default(uuid())
  pageName        String   @unique @map("page_name")
  title           String
  subtitle        String?
  description     String?
  content         Json?
  metaTitle       String?  @map("meta_title")
  metaDescription String?  @map("meta_description")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  updatedBy       String   @map("updated_by")

  // Relations
  updater User @relation(fields: [updatedBy], references: [id])

  @@map("content_pages")
}

model MediaFile {
  id           String        @id @default(uuid())
  filename     String
  originalName String        @map("original_name")
  filePath     String        @map("file_path")
  fileUrl      String        @map("file_url")
  mimeType     String        @map("mime_type")
  fileSize     Int           @map("file_size")
  fileType     FileType      @map("file_type")
  category     MediaCategory @default(GALLERY)
  title        String?
  description  String?
  altText      String?       @map("alt_text")
  tags         Json?         // Array of tags
  isFeatured   Boolean       @default(false) @map("is_featured")
  isPublic     Boolean       @default(true) @map("is_public")

  // Video specific fields
  videoId      String?       @map("video_id") // YouTube video ID
  videoUrl     String?       @map("video_url") // YouTube video URL
  thumbnailUrl String?       @map("thumbnail_url")
  duration     Int?          // Duration in seconds
  viewCount    Int?          @default(0) @map("view_count")
  privacyStatus String?      @map("privacy_status") // public, unlisted, private

  // Image specific fields
  width        Int?
  height       Int?
  cloudinaryId String?       @map("cloudinary_id")

  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  uploadedBy   String        @map("uploaded_by")

  // Entity associations (optional foreign keys)
  bloodCampId    String? @map("blood_camp_id")
  medicalCampId  String? @map("medical_camp_id")
  teamMemberId   String? @map("team_member_id")
  eventId        String? @map("event_id")

  // Relations
  uploader     User         @relation(fields: [uploadedBy], references: [id])
  bloodCamp    BloodCamp?   @relation(fields: [bloodCampId], references: [id])
  medicalCamp  MedicalCamp? @relation(fields: [medicalCampId], references: [id])
  teamMember   TeamMember?  @relation(fields: [teamMemberId], references: [id])
  event        Event?       @relation(fields: [eventId], references: [id])

  @@map("media_files")
}

model Statistic {
  id           String   @id @default(uuid())
  metricName   String   @unique @map("metric_name")
  metricValue  String   @map("metric_value")
  description  String?
  recordedDate DateTime @map("recorded_date")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("statistics")
}

model Donor {
  id                String     @id @default(uuid())
  name              String
  email             String?
  phone             String     @unique
  bloodGroup        BloodGroup @map("blood_group")
  gender            Gender
  dateOfBirth       DateTime   @map("date_of_birth")
  address           String?
  city              String?
  state             String?
  pincode           String?
  lastDonationDate  DateTime?  @map("last_donation_date")
  totalDonations    Int        @default(0) @map("total_donations")
  isEligible        Boolean    @default(true) @map("is_eligible")
  isActive          Boolean    @default(true) @map("is_active")
  emergencyContact  String?    @map("emergency_contact")
  medicalConditions String?    @map("medical_conditions")
  notes             String?
  createdAt         DateTime   @default(now()) @map("created_at")
  updatedAt         DateTime   @updatedAt @map("updated_at")

  // Relations
  alertAcceptances AlertAcceptance[]

  @@map("donors")
}

model Alert {
  id              String       @id @default(uuid())
  title           String
  message         String
  hospitalName    String       @map("hospital_name")
  hospitalAddress String       @map("hospital_address")
  contactPerson   String       @map("contact_person")
  contactPhone    String       @map("contact_phone")
  bloodGroup      BloodGroup   @map("blood_group")
  unitsRequired   Int          @map("units_required")
  urgency         AlertUrgency
  status          AlertStatus  @default(ACTIVE)
  expiresAt       DateTime     @map("expires_at")
  notes           String?
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  createdBy       String       @map("created_by")

  // Relations
  creator     User              @relation(fields: [createdBy], references: [id])
  acceptances AlertAcceptance[]

  @@map("alerts")
}

model AlertAcceptance {
  id        String   @id @default(uuid())
  alertId   String   @map("alert_id")
  donorId   String   @map("donor_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  alert Alert @relation(fields: [alertId], references: [id], onDelete: Cascade)
  donor Donor @relation(fields: [donorId], references: [id], onDelete: Cascade)

  @@unique([alertId, donorId])
  @@map("alert_acceptances")
}

model FCMToken {
  id        String   @id @default(uuid())
  userId    String?  @map("user_id")
  token     String   @unique
  deviceId  String?  @map("device_id")
  platform  String?  // ios, android, web
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("fcm_tokens")
}
